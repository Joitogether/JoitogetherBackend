generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model activities {
  id                Int                 @id @default(autoincrement())
  name              String              @db.VarChar(50)
  img_url           String?             @db.Text
  location          String              @db.Text
  host_id           String              @db.VarChar(50)
  description       String?             @db.Text
  max_participants  Int
  min_participants  Int
  category          activities_category
  status            activities_status
  price             Decimal             @db.Decimal(10, 2)
  pay_type          activities_pay_type
  require_approval  Int                 @db.TinyInt
  created_at        DateTime            @default(now()) @db.DateTime(0)
  approval_deadline DateTime?           @db.DateTime(0)
  event_time        DateTime            @db.DateTime(0)
  updated_at        DateTime            @default(now()) @db.DateTime(0)
  require_payment   Int?                @default(0) @db.TinyInt
  users             users               @relation(fields: [host_id], references: [uid], onUpdate: Restrict, map: "12")
  activity_comments activity_comments[]
  applications      applications[]
  carts_comments    carts_comments[]
  ratings           ratings[]

  @@index([host_id], map: "host_idanduid_idx")
}

model users {
  uid                                         String              @id @unique(map: "uid_UNIQUE") @db.VarChar(255)
  email                                       String              @unique(map: "email_UNIQUE") @db.VarChar(255)
  email_verified                              Boolean             @default(false)
  full_name                                   String              @db.VarChar(255)
  display_name                                String              @db.VarChar(255)
  phone_number                                String              @db.VarChar(10)
  photo_url                                   String?             @default("https://firebasestorage.googleapis.com/v0/b/login-demo1-9d3cb.firebasestorage.app/o/lifephoto%2F1733574359943_defaultimg.jpg?alt=media&token=c5486472-dadd-4276-8666-97a538e46e5f") @db.VarChar(2000)
  created_at                                  DateTime            @default(now()) @db.DateTime(0)
  city                                        String?             @db.VarChar(5)
  age                                         Int?
  career                                      String?             @db.VarChar(45)
  favorite_sentence                           String?             @db.VarChar(45)
  tags                                        String?             @db.VarChar(255)
  self_introduction                           String?             @db.VarChar(45)
  zodiac                                      String?             @db.VarChar(3)
  hobby                                       String?             @db.VarChar(45)
  expertise                                   String?             @db.VarChar(45)
  interested_in                               String?             @db.VarChar(255)
  life_photo_1                                String?             @db.Text
  life_photo_2                                String?             @db.Text
  activities                                  activities[]
  activity_comments                           activity_comments[]
  applications                                applications[]
  carts                                       carts[]
  followers_followers_follower_idTousers      followers[]         @relation("followers_follower_idTousers")
  followers_followers_user_idTousers          followers[]         @relation("followers_user_idTousers")
  notifications_notifications_actor_idTousers notifications[]     @relation("notifications_actor_idTousers")
  notifications_notifications_user_idTousers  notifications[]     @relation("notifications_user_idTousers")
  post_comments                               post_comments[]
  posts                                       posts[]
  ratings_ratings_host_idTousers              ratings[]           @relation("ratings_host_idTousers")
  ratings_ratings_user_idTousers              ratings[]           @relation("ratings_user_idTousers")
}

model applications {
  application_id     Int                 @unique(map: "id_UNIQUE") @default(autoincrement()) @db.UnsignedInt
  activity_id        Int
  participant_id     String              @db.VarChar(255)
  status             applications_status @default(registered)
  comment            String?             @db.VarChar(50)
  register_validated Int                 @default(0) @db.TinyInt
  created_at         DateTime            @default(now()) @db.DateTime(0)
  updated_at         DateTime?           @db.DateTime(0)
  activities         activities          @relation(fields: [activity_id], references: [id], onDelete: Cascade, map: "applications_ibfk_1")
  users              users               @relation(fields: [participant_id], references: [uid], onDelete: Cascade, map: "applications_ibfk_2")

  @@id([activity_id, participant_id])
  @@index([participant_id], map: "participants_ibfk_2")
}

model followers {
  id                                 Int    @id @unique(map: "id_UNIQUE")
  user_id                            String @db.VarChar(255)
  follower_id                        String @db.VarChar(255)
  users_followers_follower_idTousers users  @relation("followers_follower_idTousers", fields: [follower_id], references: [uid], onDelete: Cascade, map: "followers bind follower id")
  users_followers_user_idTousers     users  @relation("followers_user_idTousers", fields: [user_id], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "followers bind user id")

  @@index([follower_id], map: "bind follower id_idx")
  @@index([user_id], map: "bind user id_idx")
}

model ratings {
  rating_id                    Int        @unique(map: "rating_id_UNIQUE") @default(autoincrement())
  user_id                      String     @db.VarChar(255)
  host_id                      String     @db.VarChar(255)
  rating_heart                 Int
  user_comment                 String   @db.Text
  rating_kindness              Int
  rating_ability               Int
  rating_credit                Int
  created_at                   DateTime @default(now()) @db.DateTime(0)
  users_ratings_host_idTousers users    @relation("ratings_host_idTousers", fields: [host_id], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "bind host id")
  users_ratings_user_idTousers users    @relation("ratings_user_idTousers", fields: [user_id], references: [uid], onDelete: Cascade, map: "bind user id")

  @@id([activity_id, user_id, host_id])
  @@index([host_id], map: "bind host id_idx")
  @@index([user_id], map: "bind id_idx")
}

model activity_comments {
  comment_id   Int                      @id @unique(map: "comment_id_UNIQUE") @default(autoincrement())
  activity_id  Int
  user_comment String                   @db.VarChar(50)
  uid          String                   @db.VarChar(255)
  created_at   DateTime                 @default(now()) @db.DateTime(0)
  status       activity_comments_status @default(posted)
  activities   activities               @relation(fields: [activity_id], references: [id], onDelete: Cascade, map: "FK_ac_activities")
  users        users                    @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "FK_ac_users")

  @@index([activity_id], map: "FK_ac_activities_idx")
  @@index([uid], map: "FK_ac_users_idx")
}

model post_comments {
  comment_id      Int                          @id @default(autoincrement())
  post_id         Int
  comment_content String                       @db.Text
  uid             String                       @db.VarChar(255)
  created_at      DateTime                     @default(now()) @db.DateTime(0)
  comment_status  post_comments_comment_status
  users           users                        @relation(fields: [uid], references: [uid], onDelete: NoAction, onUpdate: NoAction, map: "FK_postComments_users")
  posts           posts                        @relation(fields: [post_id], references: [post_id], onDelete: NoAction, map: "FK_postComments_users-postid")

  @@index([post_id], map: "FK_postComments_users-postid_idx")
  @@index([uid], map: "FK_postComments_users_idx")
}

model posts {
  post_id       Int                 @id @default(autoincrement())
  post_title    String              @db.VarChar(10)
  post_content  String              @db.Text
  uid           String              @db.VarChar(255)
  created_at    DateTime            @default(now()) @db.DateTime(0)
  updated_at    DateTime?           @default(now()) @db.DateTime(0)
  post_category posts_post_category
  post_status   posts_post_status
  post_img      String?             @db.Text
  post_comments post_comments[]
  post_likes    post_likes[]
  users         users               @relation(fields: [uid], references: [uid], map: "FK_posts_users-uid")

  @@index([uid], map: "FK_posts_users-uid_idx")
}

model post_likes {
  like_id     Int                    @id @default(autoincrement())
  post_id     Int
  uid         String                 @db.VarChar(255)
  created_at  DateTime?              @default(now()) @db.Timestamp(0)
  like_status post_likes_like_status
  posts       posts                  @relation(fields: [post_id], references: [post_id], onDelete: Cascade, map: "fk_post_likes_posts")

  @@index([post_id], map: "fk_post_likes_posts")
}

model notifications {
  id                                  Int                       @id @unique(map: "id_UNIQUE") @default(autoincrement())
  user_id                             String                    @db.VarChar(255)
  actor_id                            String                    @db.VarChar(255)
  action                              notifications_action
  target_type                         notifications_target_type
  target_id                           Int
  message                             String?                   @db.Text
  is_read                             Int?                      @default(0) @db.TinyInt
  created_at                          DateTime?                 @default(now()) @db.DateTime(0)
  link                                String                    @db.VarChar(45)
  users_notifications_actor_idTousers users                     @relation("notifications_actor_idTousers", fields: [actor_id], references: [uid], onDelete: NoAction, map: "FK_noti_users_actorId")
  users_notifications_user_idTousers  users                     @relation("notifications_user_idTousers", fields: [user_id], references: [uid], onDelete: NoAction, map: "FK_noti_users_userId")

  @@index([actor_id], map: "FK_noti_users_actorId_idx")
  @@index([user_id], map: "FK_noti_users_userId_idx")
}

model carts {
  id             Int              @id @default(autoincrement())
  user_id        String?          @db.VarChar(255)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  users          users?           @relation(fields: [user_id], references: [uid], onDelete: Cascade, onUpdate: NoAction)
  carts_comments carts_comments[]

  @@index([user_id], map: "carts_user_id_fkey")
}

model carts_comments {
  id          Int        @id @default(autoincrement())
  cart_id     Int
  activity_id Int
  created_at  DateTime   @default(now())
  activities  activities @relation(fields: [activity_id], references: [id])
  carts       carts      @relation(fields: [cart_id], references: [id])

  @@unique([cart_id, activity_id])
  @@index([activity_id], map: "carts_comments_activity_id_fkey")
  @@index([cart_id, activity_id])
}

enum activities_category {
  food
  shopping
  travel
  sports
  education
  others
}

enum activities_status {
  registrationOpen
  onGoing
  completed
  cancelled
}

enum activities_pay_type {
  free
  AA
  host
}

enum applications_status {
  registered
  approved
  host_declined
  participant_cancelled
}

enum activity_comments_status {
  posted
  deleted
}

enum posts_post_status {
  onEdit
  posted
  deleted
}

enum posts_post_category {
  food
  shopping
  travel
  sports
  education
  others
}

enum notifications_action {
  like
  comment
  register
  review
  rate
}

enum notifications_target_type {
  post
  activity
  rating
}

enum post_likes_like_status {
  liked
  unlike
}

enum post_comments_comment_status {
  active
  deleted
}
